/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MockInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_FALLBACK_VALUE()": FunctionFragment;
    "MOCKS_LIST_END()": FunctionFragment;
    "MOCKS_LIST_END_HASH()": FunctionFragment;
    "MOCKS_LIST_START()": FunctionFragment;
    "SENTINEL_ANY_MOCKS()": FunctionFragment;
    "givenAnyReturn(bytes)": FunctionFragment;
    "givenAnyReturnAddress(address)": FunctionFragment;
    "givenAnyReturnBool(bool)": FunctionFragment;
    "givenAnyReturnUint(uint256)": FunctionFragment;
    "givenAnyRevert()": FunctionFragment;
    "givenAnyRevertWithMessage(string)": FunctionFragment;
    "givenAnyRunOutOfGas()": FunctionFragment;
    "givenCalldataReturn(bytes,bytes)": FunctionFragment;
    "givenCalldataReturnAddress(bytes,address)": FunctionFragment;
    "givenCalldataReturnBool(bytes,bool)": FunctionFragment;
    "givenCalldataReturnUint(bytes,uint256)": FunctionFragment;
    "givenCalldataRevert(bytes)": FunctionFragment;
    "givenCalldataRevertWithMessage(bytes,string)": FunctionFragment;
    "givenCalldataRunOutOfGas(bytes)": FunctionFragment;
    "givenMethodReturn(bytes,bytes)": FunctionFragment;
    "givenMethodReturnAddress(bytes,address)": FunctionFragment;
    "givenMethodReturnBool(bytes,bool)": FunctionFragment;
    "givenMethodReturnUint(bytes,uint256)": FunctionFragment;
    "givenMethodRevert(bytes)": FunctionFragment;
    "givenMethodRevertWithMessage(bytes,string)": FunctionFragment;
    "givenMethodRunOutOfGas(bytes)": FunctionFragment;
    "invocationCount()": FunctionFragment;
    "invocationCountForCalldata(bytes)": FunctionFragment;
    "invocationCountForMethod(bytes)": FunctionFragment;
    "reset()": FunctionFragment;
    "updateInvocationCount(bytes4,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_FALLBACK_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MOCKS_LIST_END",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MOCKS_LIST_END_HASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MOCKS_LIST_START",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SENTINEL_ANY_MOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "givenAnyReturn",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "givenAnyReturnAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "givenAnyReturnBool",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "givenAnyReturnUint",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "givenAnyRevert",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "givenAnyRevertWithMessage",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "givenAnyRunOutOfGas",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "givenCalldataReturn",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "givenCalldataReturnAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "givenCalldataReturnBool",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "givenCalldataReturnUint",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "givenCalldataRevert",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "givenCalldataRevertWithMessage",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "givenCalldataRunOutOfGas",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "givenMethodReturn",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "givenMethodReturnAddress",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "givenMethodReturnBool",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "givenMethodReturnUint",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "givenMethodRevert",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "givenMethodRevertWithMessage",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "givenMethodRunOutOfGas",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invocationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "invocationCountForCalldata",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "invocationCountForMethod",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "reset", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateInvocationCount",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_FALLBACK_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MOCKS_LIST_END",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MOCKS_LIST_END_HASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MOCKS_LIST_START",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SENTINEL_ANY_MOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenAnyReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenAnyReturnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenAnyReturnBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenAnyReturnUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenAnyRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenAnyRevertWithMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenAnyRunOutOfGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenCalldataReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenCalldataReturnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenCalldataReturnBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenCalldataReturnUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenCalldataRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenCalldataRevertWithMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenCalldataRunOutOfGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenMethodReturn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenMethodReturnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenMethodReturnBool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenMethodReturnUint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenMethodRevert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenMethodRevertWithMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "givenMethodRunOutOfGas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invocationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invocationCountForCalldata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "invocationCountForMethod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateInvocationCount",
    data: BytesLike
  ): Result;

  events: {};
}

export class Mock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MockInterface;

  functions: {
    DEFAULT_FALLBACK_VALUE(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "DEFAULT_FALLBACK_VALUE()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    MOCKS_LIST_END(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "MOCKS_LIST_END()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    MOCKS_LIST_END_HASH(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "MOCKS_LIST_END_HASH()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    MOCKS_LIST_START(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "MOCKS_LIST_START()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    SENTINEL_ANY_MOCKS(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "SENTINEL_ANY_MOCKS()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    givenAnyReturn(
      response: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenAnyReturn(bytes)"(
      response: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenAnyReturnAddress(
      response: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenAnyReturnAddress(address)"(
      response: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenAnyReturnBool(
      response: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenAnyReturnBool(bool)"(
      response: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenAnyReturnUint(
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenAnyReturnUint(uint256)"(
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenAnyRevert(overrides?: Overrides): Promise<ContractTransaction>;

    "givenAnyRevert()"(overrides?: Overrides): Promise<ContractTransaction>;

    givenAnyRevertWithMessage(
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenAnyRevertWithMessage(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenAnyRunOutOfGas(overrides?: Overrides): Promise<ContractTransaction>;

    "givenAnyRunOutOfGas()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenCalldataReturn(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenCalldataReturn(bytes,bytes)"(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenCalldataReturnAddress(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenCalldataReturnAddress(bytes,address)"(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenCalldataReturnBool(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenCalldataReturnBool(bytes,bool)"(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenCalldataReturnUint(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenCalldataReturnUint(bytes,uint256)"(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenCalldataRevert(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenCalldataRevert(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenCalldataRevertWithMessage(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenCalldataRevertWithMessage(bytes,string)"(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenCalldataRunOutOfGas(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenCalldataRunOutOfGas(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenMethodReturn(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenMethodReturn(bytes,bytes)"(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenMethodReturnAddress(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenMethodReturnAddress(bytes,address)"(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenMethodReturnBool(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenMethodReturnBool(bytes,bool)"(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenMethodReturnUint(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenMethodReturnUint(bytes,uint256)"(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenMethodRevert(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenMethodRevert(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenMethodRevertWithMessage(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenMethodRevertWithMessage(bytes,string)"(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    givenMethodRunOutOfGas(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "givenMethodRunOutOfGas(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    invocationCount(overrides?: Overrides): Promise<ContractTransaction>;

    "invocationCount()"(overrides?: Overrides): Promise<ContractTransaction>;

    invocationCountForCalldata(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "invocationCountForCalldata(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    invocationCountForMethod(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "invocationCountForMethod(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    reset(overrides?: Overrides): Promise<ContractTransaction>;

    "reset()"(overrides?: Overrides): Promise<ContractTransaction>;

    updateInvocationCount(
      methodId: BytesLike,
      originalMsgData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "updateInvocationCount(bytes4,bytes)"(
      methodId: BytesLike,
      originalMsgData: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_FALLBACK_VALUE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_FALLBACK_VALUE()"(overrides?: CallOverrides): Promise<string>;

  MOCKS_LIST_END(overrides?: CallOverrides): Promise<string>;

  "MOCKS_LIST_END()"(overrides?: CallOverrides): Promise<string>;

  MOCKS_LIST_END_HASH(overrides?: CallOverrides): Promise<string>;

  "MOCKS_LIST_END_HASH()"(overrides?: CallOverrides): Promise<string>;

  MOCKS_LIST_START(overrides?: CallOverrides): Promise<string>;

  "MOCKS_LIST_START()"(overrides?: CallOverrides): Promise<string>;

  SENTINEL_ANY_MOCKS(overrides?: CallOverrides): Promise<string>;

  "SENTINEL_ANY_MOCKS()"(overrides?: CallOverrides): Promise<string>;

  givenAnyReturn(
    response: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenAnyReturn(bytes)"(
    response: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenAnyReturnAddress(
    response: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenAnyReturnAddress(address)"(
    response: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenAnyReturnBool(
    response: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenAnyReturnBool(bool)"(
    response: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenAnyReturnUint(
    response: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenAnyReturnUint(uint256)"(
    response: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenAnyRevert(overrides?: Overrides): Promise<ContractTransaction>;

  "givenAnyRevert()"(overrides?: Overrides): Promise<ContractTransaction>;

  givenAnyRevertWithMessage(
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenAnyRevertWithMessage(string)"(
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenAnyRunOutOfGas(overrides?: Overrides): Promise<ContractTransaction>;

  "givenAnyRunOutOfGas()"(overrides?: Overrides): Promise<ContractTransaction>;

  givenCalldataReturn(
    call: BytesLike,
    response: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenCalldataReturn(bytes,bytes)"(
    call: BytesLike,
    response: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenCalldataReturnAddress(
    call: BytesLike,
    response: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenCalldataReturnAddress(bytes,address)"(
    call: BytesLike,
    response: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenCalldataReturnBool(
    call: BytesLike,
    response: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenCalldataReturnBool(bytes,bool)"(
    call: BytesLike,
    response: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenCalldataReturnUint(
    call: BytesLike,
    response: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenCalldataReturnUint(bytes,uint256)"(
    call: BytesLike,
    response: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenCalldataRevert(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenCalldataRevert(bytes)"(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenCalldataRevertWithMessage(
    call: BytesLike,
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenCalldataRevertWithMessage(bytes,string)"(
    call: BytesLike,
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenCalldataRunOutOfGas(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenCalldataRunOutOfGas(bytes)"(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenMethodReturn(
    call: BytesLike,
    response: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenMethodReturn(bytes,bytes)"(
    call: BytesLike,
    response: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenMethodReturnAddress(
    call: BytesLike,
    response: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenMethodReturnAddress(bytes,address)"(
    call: BytesLike,
    response: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenMethodReturnBool(
    call: BytesLike,
    response: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenMethodReturnBool(bytes,bool)"(
    call: BytesLike,
    response: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenMethodReturnUint(
    call: BytesLike,
    response: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenMethodReturnUint(bytes,uint256)"(
    call: BytesLike,
    response: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenMethodRevert(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenMethodRevert(bytes)"(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenMethodRevertWithMessage(
    call: BytesLike,
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenMethodRevertWithMessage(bytes,string)"(
    call: BytesLike,
    message: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  givenMethodRunOutOfGas(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "givenMethodRunOutOfGas(bytes)"(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  invocationCount(overrides?: Overrides): Promise<ContractTransaction>;

  "invocationCount()"(overrides?: Overrides): Promise<ContractTransaction>;

  invocationCountForCalldata(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "invocationCountForCalldata(bytes)"(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  invocationCountForMethod(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "invocationCountForMethod(bytes)"(
    call: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  reset(overrides?: Overrides): Promise<ContractTransaction>;

  "reset()"(overrides?: Overrides): Promise<ContractTransaction>;

  updateInvocationCount(
    methodId: BytesLike,
    originalMsgData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "updateInvocationCount(bytes4,bytes)"(
    methodId: BytesLike,
    originalMsgData: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_FALLBACK_VALUE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_FALLBACK_VALUE()"(overrides?: CallOverrides): Promise<string>;

    MOCKS_LIST_END(overrides?: CallOverrides): Promise<string>;

    "MOCKS_LIST_END()"(overrides?: CallOverrides): Promise<string>;

    MOCKS_LIST_END_HASH(overrides?: CallOverrides): Promise<string>;

    "MOCKS_LIST_END_HASH()"(overrides?: CallOverrides): Promise<string>;

    MOCKS_LIST_START(overrides?: CallOverrides): Promise<string>;

    "MOCKS_LIST_START()"(overrides?: CallOverrides): Promise<string>;

    SENTINEL_ANY_MOCKS(overrides?: CallOverrides): Promise<string>;

    "SENTINEL_ANY_MOCKS()"(overrides?: CallOverrides): Promise<string>;

    givenAnyReturn(
      response: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenAnyReturn(bytes)"(
      response: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    givenAnyReturnAddress(
      response: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenAnyReturnAddress(address)"(
      response: string,
      overrides?: CallOverrides
    ): Promise<void>;

    givenAnyReturnBool(
      response: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenAnyReturnBool(bool)"(
      response: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    givenAnyReturnUint(
      response: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenAnyReturnUint(uint256)"(
      response: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    givenAnyRevert(overrides?: CallOverrides): Promise<void>;

    "givenAnyRevert()"(overrides?: CallOverrides): Promise<void>;

    givenAnyRevertWithMessage(
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenAnyRevertWithMessage(string)"(
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    givenAnyRunOutOfGas(overrides?: CallOverrides): Promise<void>;

    "givenAnyRunOutOfGas()"(overrides?: CallOverrides): Promise<void>;

    givenCalldataReturn(
      call: BytesLike,
      response: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenCalldataReturn(bytes,bytes)"(
      call: BytesLike,
      response: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    givenCalldataReturnAddress(
      call: BytesLike,
      response: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenCalldataReturnAddress(bytes,address)"(
      call: BytesLike,
      response: string,
      overrides?: CallOverrides
    ): Promise<void>;

    givenCalldataReturnBool(
      call: BytesLike,
      response: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenCalldataReturnBool(bytes,bool)"(
      call: BytesLike,
      response: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    givenCalldataReturnUint(
      call: BytesLike,
      response: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenCalldataReturnUint(bytes,uint256)"(
      call: BytesLike,
      response: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    givenCalldataRevert(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenCalldataRevert(bytes)"(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    givenCalldataRevertWithMessage(
      call: BytesLike,
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenCalldataRevertWithMessage(bytes,string)"(
      call: BytesLike,
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    givenCalldataRunOutOfGas(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenCalldataRunOutOfGas(bytes)"(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    givenMethodReturn(
      call: BytesLike,
      response: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenMethodReturn(bytes,bytes)"(
      call: BytesLike,
      response: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    givenMethodReturnAddress(
      call: BytesLike,
      response: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenMethodReturnAddress(bytes,address)"(
      call: BytesLike,
      response: string,
      overrides?: CallOverrides
    ): Promise<void>;

    givenMethodReturnBool(
      call: BytesLike,
      response: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenMethodReturnBool(bytes,bool)"(
      call: BytesLike,
      response: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    givenMethodReturnUint(
      call: BytesLike,
      response: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenMethodReturnUint(bytes,uint256)"(
      call: BytesLike,
      response: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    givenMethodRevert(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenMethodRevert(bytes)"(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    givenMethodRevertWithMessage(
      call: BytesLike,
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenMethodRevertWithMessage(bytes,string)"(
      call: BytesLike,
      message: string,
      overrides?: CallOverrides
    ): Promise<void>;

    givenMethodRunOutOfGas(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "givenMethodRunOutOfGas(bytes)"(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    invocationCount(overrides?: CallOverrides): Promise<BigNumber>;

    "invocationCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    invocationCountForCalldata(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "invocationCountForCalldata(bytes)"(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    invocationCountForMethod(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "invocationCountForMethod(bytes)"(
      call: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reset(overrides?: CallOverrides): Promise<void>;

    "reset()"(overrides?: CallOverrides): Promise<void>;

    updateInvocationCount(
      methodId: BytesLike,
      originalMsgData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateInvocationCount(bytes4,bytes)"(
      methodId: BytesLike,
      originalMsgData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    DEFAULT_FALLBACK_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_FALLBACK_VALUE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MOCKS_LIST_END(overrides?: CallOverrides): Promise<BigNumber>;

    "MOCKS_LIST_END()"(overrides?: CallOverrides): Promise<BigNumber>;

    MOCKS_LIST_END_HASH(overrides?: CallOverrides): Promise<BigNumber>;

    "MOCKS_LIST_END_HASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    MOCKS_LIST_START(overrides?: CallOverrides): Promise<BigNumber>;

    "MOCKS_LIST_START()"(overrides?: CallOverrides): Promise<BigNumber>;

    SENTINEL_ANY_MOCKS(overrides?: CallOverrides): Promise<BigNumber>;

    "SENTINEL_ANY_MOCKS()"(overrides?: CallOverrides): Promise<BigNumber>;

    givenAnyReturn(
      response: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenAnyReturn(bytes)"(
      response: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenAnyReturnAddress(
      response: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenAnyReturnAddress(address)"(
      response: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenAnyReturnBool(
      response: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenAnyReturnBool(bool)"(
      response: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenAnyReturnUint(
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenAnyReturnUint(uint256)"(
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenAnyRevert(overrides?: Overrides): Promise<BigNumber>;

    "givenAnyRevert()"(overrides?: Overrides): Promise<BigNumber>;

    givenAnyRevertWithMessage(
      message: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenAnyRevertWithMessage(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenAnyRunOutOfGas(overrides?: Overrides): Promise<BigNumber>;

    "givenAnyRunOutOfGas()"(overrides?: Overrides): Promise<BigNumber>;

    givenCalldataReturn(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenCalldataReturn(bytes,bytes)"(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenCalldataReturnAddress(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenCalldataReturnAddress(bytes,address)"(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenCalldataReturnBool(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenCalldataReturnBool(bytes,bool)"(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenCalldataReturnUint(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenCalldataReturnUint(bytes,uint256)"(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenCalldataRevert(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenCalldataRevert(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenCalldataRevertWithMessage(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenCalldataRevertWithMessage(bytes,string)"(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenCalldataRunOutOfGas(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenCalldataRunOutOfGas(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenMethodReturn(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenMethodReturn(bytes,bytes)"(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenMethodReturnAddress(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenMethodReturnAddress(bytes,address)"(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenMethodReturnBool(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenMethodReturnBool(bytes,bool)"(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenMethodReturnUint(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenMethodReturnUint(bytes,uint256)"(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenMethodRevert(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenMethodRevert(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenMethodRevertWithMessage(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenMethodRevertWithMessage(bytes,string)"(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    givenMethodRunOutOfGas(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "givenMethodRunOutOfGas(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    invocationCount(overrides?: Overrides): Promise<BigNumber>;

    "invocationCount()"(overrides?: Overrides): Promise<BigNumber>;

    invocationCountForCalldata(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "invocationCountForCalldata(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    invocationCountForMethod(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "invocationCountForMethod(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    reset(overrides?: Overrides): Promise<BigNumber>;

    "reset()"(overrides?: Overrides): Promise<BigNumber>;

    updateInvocationCount(
      methodId: BytesLike,
      originalMsgData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "updateInvocationCount(bytes4,bytes)"(
      methodId: BytesLike,
      originalMsgData: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_FALLBACK_VALUE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_FALLBACK_VALUE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MOCKS_LIST_END(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MOCKS_LIST_END()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MOCKS_LIST_END_HASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "MOCKS_LIST_END_HASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MOCKS_LIST_START(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MOCKS_LIST_START()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    SENTINEL_ANY_MOCKS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "SENTINEL_ANY_MOCKS()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    givenAnyReturn(
      response: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenAnyReturn(bytes)"(
      response: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenAnyReturnAddress(
      response: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenAnyReturnAddress(address)"(
      response: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenAnyReturnBool(
      response: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenAnyReturnBool(bool)"(
      response: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenAnyReturnUint(
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenAnyReturnUint(uint256)"(
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenAnyRevert(overrides?: Overrides): Promise<PopulatedTransaction>;

    "givenAnyRevert()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    givenAnyRevertWithMessage(
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenAnyRevertWithMessage(string)"(
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenAnyRunOutOfGas(overrides?: Overrides): Promise<PopulatedTransaction>;

    "givenAnyRunOutOfGas()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenCalldataReturn(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenCalldataReturn(bytes,bytes)"(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenCalldataReturnAddress(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenCalldataReturnAddress(bytes,address)"(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenCalldataReturnBool(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenCalldataReturnBool(bytes,bool)"(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenCalldataReturnUint(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenCalldataReturnUint(bytes,uint256)"(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenCalldataRevert(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenCalldataRevert(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenCalldataRevertWithMessage(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenCalldataRevertWithMessage(bytes,string)"(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenCalldataRunOutOfGas(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenCalldataRunOutOfGas(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenMethodReturn(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenMethodReturn(bytes,bytes)"(
      call: BytesLike,
      response: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenMethodReturnAddress(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenMethodReturnAddress(bytes,address)"(
      call: BytesLike,
      response: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenMethodReturnBool(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenMethodReturnBool(bytes,bool)"(
      call: BytesLike,
      response: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenMethodReturnUint(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenMethodReturnUint(bytes,uint256)"(
      call: BytesLike,
      response: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenMethodRevert(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenMethodRevert(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenMethodRevertWithMessage(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenMethodRevertWithMessage(bytes,string)"(
      call: BytesLike,
      message: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    givenMethodRunOutOfGas(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "givenMethodRunOutOfGas(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    invocationCount(overrides?: Overrides): Promise<PopulatedTransaction>;

    "invocationCount()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    invocationCountForCalldata(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "invocationCountForCalldata(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    invocationCountForMethod(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "invocationCountForMethod(bytes)"(
      call: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    reset(overrides?: Overrides): Promise<PopulatedTransaction>;

    "reset()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    updateInvocationCount(
      methodId: BytesLike,
      originalMsgData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "updateInvocationCount(bytes4,bytes)"(
      methodId: BytesLike,
      originalMsgData: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
